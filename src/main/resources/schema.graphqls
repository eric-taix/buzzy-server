schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

enum TeamFilterType {
    NAME, QUIZZ_ID
}

input TeamFilter {
    type: TeamFilterType
    desiratedValue: String
}

type Query {
    # List all team aleady connected
    teams(filter: TeamFilter): [Team!]!
}

enum State {
    THINKING
    BUZZED
    PAUSED
    WRONG
}

type Team {
    # The unique ID
    id: ID!
    # The name of the team
    name: String
    # The team avatar, generated automatically from its name
    avatarUrl: String
    # The total number of points
    points: Int
    # The state of the team
    state: State
}

type Mutation {
    # Create a new team which will compete in the quizz
    createTeam(name: String!): Team
    # Update Team
    updateTeam(teamId: ID!, name: String, points: Int): Team
    # Buzz for a question. It will stop all other teams until the answer if true or false
    buzz(teamId: ID!): Team
    # Set the buzzed team to the right answer, add one point, all teams state are set to THINKING
    correct: Team
}

type Subscription {
    team(teamId: ID!): Team
}